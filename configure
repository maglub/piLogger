#!/bin/bash

this_dir=$(cd `dirname $0`;pwd)
this_script=$(basename $0)
configDir=$this_dir/etc
configFile=$configDir/piLogger.conf
configYml=$configDir/piLogger.yml

withAbioWire=""
piLoggerLocale=""

#=============================
# functions
#=============================
errorExit(){
  echo "ERROR: $@"
  exit 1
}

usage(){
cat<<EOT

Usage:

  $this_dir/$this_script [options]

Options:

  --withAbioWire    -> Using abio wire interface (will use Axiris port of owfs)
  --withLocale      -> Setting up en_US.UTF-8 locale
  --minimizeInstall -> Remove any unnecessary package/files from the Raspbian installation (Caution, will remove a lot!)
  --noPassword      -> user pi does not have a password

Default:

  * Default use of dpkg owfs

EOT

}

check(){

  echo "* Packages:"
  for package in owfs rrdtool lighttpd
  do
    echo -n "  - $package:"
    sudo dpkg -s $package >/dev/null 2>&1 && echo -n " OK! installed" || echo -n " ERROR: not installed"
    echo ""
  done
  
  echo "* Directories:"

  for dir in /var/lib/piLogger /var/lib/piLogger/db /var/lib/piLogger/cache /var/lib/piLogger/xml /var/lib/piLogger/graphs 
  do
    echo -n "  - $dir:"
    [ -d $dir ] && echo -n " OK! exists" || echo -n " ERROR: does not exist"
    echo ""
  done

  echo "* Soft links:"

  for link in $this_dir/html/cache $this_dir/html/graphs $this_dir/html/xml /etc/piLogger.d
  do
    echo -n "  - $link:"
    [ -h $link ] && echo -n " OK! exists" || echo -n " ERROR: does not exist"
    echo ""
  done

  echo "* Crontab:"

  for crontabEntry in "bin/logAll" "bin/refreshCaches sensors" "bin/refreshCaches 12h" "bin/refreshCaches 24h" "bin/refreshCaches 168h"
  do
    echo -n "  - $crontabEntry:"
    crontab -l | grep "$crontabEntry" >/dev/null 2>&1 && echo -n " OK! exists" || echo -n " ERROR: does not exist"
    echo ""
  done
    
  echo "* Logrotate:"
  echo -n "  - file /etc/logrotate.d/piLogger:"
  [ -f /etc/logrotate.d/piLogger ] && echo -n " OK! exists" || echo -n " ERROR: does not exist"
  echo ""

  echo "* Config file entries:"

  echo -n "  - $configDir/piLogger.conf"
  [ -f $configDir/piLogger.conf ] && echo -n " OK! exists" || echo -n " does not exist"
  echo ""

  [ -f $configDir/piLogger.conf ] && {
    for parameter in interface piLoggerLocale baseDir htmlDir oneWireDir cacheDir temperatureFile spoolDir
    do
      echo "  - $parameter="$(grep "^${parameter}=" $configDir/piLogger.conf | cut -d"=" -f2 )
    done

  }
  

}

#=============================
# Command line parameters
#=============================
while [ -n "$1" ]
do
  case $1 in
    --check)
        check
        exit 0
      ;;
    --withAbioWire)
      withAbioWire=true
      interface=AbioWire
      shift
      ;;
    --withLocale)
      withLocale=true
      piLoggerLocale=true
      shift
      ;;
    --minimizeInstall)
      minimizeInstall=true
      shift
      ;;
    --noPassword)
      noPassword=true
      shift
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done


#=============================
# MAIN
#=============================

#--- have SUDO ask for password if necessary

res=0
[ -z "$noPassword" ] && { echo "Your user need a password for sudo" ; sudo -v ; res=$? ; }
[ $res -ne 0 ] && { echo "Sudo ended badly, exiting" ; exit 1 ; }

sudoCount=$(sudo -l 2>/dev/null | awk 'printit=="true" {print} /may run the following/ {printit="true"}' | grep "ALL$" | wc -l)
[ $sudoCount -eq 0 ] && { echo "WARNING: you will need sudo rights for the installation. Check with sudo -l" ; }


[ ! -d "$configDir" ] && mkdir -p $configDir

#--- prepare the config file

[ -f $configFile ] && errorExit "File $configFile already exists. Exiting! Please remove the config file before running again."
[ -f $configYml ] && errorExit "File $configYml already exists. Exiting! Please remove the config file before running again."

#--- set the interface

[ -z "$interface" ] && interface=default

numCpu=$(cat /proc/cpuinfo | grep Processor | wc -l)
deviceIdentifier=$(cat /sys/class/net/eth0/address | md5sum | cut -d" " -f1)

cat>$configFile<<EOT
#----------------------------
# Config file for piLogger
#----------------------------
interface=$interface
piLoggerLocale=$piLoggerLocale

baseDir=$this_dir
dataDir=/var/lib/piLogger
oneWireDir=${oneWireDir:-/mnt/1wire}

htmlDir=\$baseDir/html
cacheDir=\$dataDir/cache
temperatureFile=temperature
rrdDir=\$dataDir/db
dbDir=\$dataDir/db
graphDir=\$dataDir/graphs
backupDir=\$dataDir/backup
spoolDir=/var/spool/piLogger

appDbFile=\$dbDir/app.sqlite3

logDir=/var/log/piLogger

#----------------------
dateFormat="+%Y%m%d %H%M%S"

#-------------------------
# Parallel processing
#-------------------------
parallelProcessing=$numCpu

#-------------------------
# for remote logging
#-------------------------
#--- remoteLogging=true
remoteLogging=""
remoteHost=""

#-------------------------
# for piLogger Cloud
#-------------------------
deviceIdentifier=$deviceIdentifier
authToken=""

EOT


cat>$configYml<<EOT
remoteLogging:
  enabled:       true
  host:
  blacklist: 
#-------------------------
# for piLogger Cloud
#-------------------------
  piLogger_cloud:
    deviceIdentifier: SECRET
    authToken: "SECRET"
    blacklist: 
#------------------------
# shiftr.io
#------------------------
  shiftr:
    shiftrAuth: "SECRET"
EOT

[ -n "$minimizeInstall" ] && { echo "minimizeInstall=true" >> $configFile ; }
