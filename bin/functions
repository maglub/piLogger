thisScript=$(basename $0)
[ -z "$logDir" ] && logDir=/var/log/piLogger
logFile=$logDir/$thisScript.log
configDir=$this_dir/../etc
piLoggerDeviceAliasFile=$configDir/aliases.conf

. $configDir/piLogger.conf
[ -z "$dbDir" ] && dbDir=$dataDir/db
[ -z "$graphDir" ] && graphDir=$dataDir/graphs

#------------------------------------
# Variables (normally set in piLogger.conf)
#------------------------------------
[ -z "$parallelProcessing" ] && parallelProcessing=1

#------------------------------------
# errorExit
#------------------------------------
errorExit(){
  logIt "ERROR: $@"
  exit 1
}

#------------------------------------
# logIt
#------------------------------------
logIt(){
  logIt_TS=$(date "+%Y%m%d_%H%M%S")
  echo "$logIt_TS;$thisScript;$@" >> $logFile
  echo "$logIt_TS;$thisScript;$@" 1>&2
}

#------------------------------------
# listDevices
#------------------------------------
getAllDevices(){
  ld_dir="$1"
  ld_force="$2"

  [[ -f $configDir/devices.scanned && -z "$ld_force" ]] && { cat $configDir/devices.scanned ; return 0 ; }
  [[ -n "$ld_force" ]] && { echo $ld_dir/[0-9]*  | grep -v "\*$" ; return 0 ; }
  local curRes=$(dbGetAllDevicePaths)
  [ -n "$curRes" ] && { echo $curRes ; logIt "Found devices in the database." ; return 0 ; }
  logIt "No scanned devices in the database, cheking in fs."
  echo $ld_dir/bus*/[0-9]* | grep -v "\*$"
}

#------------------------------------
# getAllDeviceNames
#------------------------------------
getAllDeviceNames(){
  ld_dir=$1
  ls -1 $ld_dir/bus* | grep "^[0-9]" 
}

#------------------------------------
# getDeviceTypeByDevicePath
#------------------------------------
getDeviceTypeByDevicePath() {
  cur_deviceType=$(cat $1/type)
  [ -n "$debug" ] && echo "Device type: $cur_deviceType" 1>&2
  echo $cur_deviceType
}

#------------------------------------
# getTemperature
#------------------------------------
function getTemperature(){

  local curDevice="$1"
 
  [ -n "$debug" ] && logIt "fetching temperature for device: $curDevice"
  [ -d $curDevice ] && { getTemperatureByDevicePath $curDevice ; return 0 ; }
  [ -d $oneWireDir/$curDevice ] && { getTemperatureByDevicePath /mnt/1wire/$curDevice ; return 0 ; }
  [ ! -d $curDevice ] && { getTemperatureByDeviceAlias $curDevice ; return 0 ; }
  
  return 0
}

#------------------------------------
# getTemperatureByDevicePath
#------------------------------------
getTemperatureByDevicePath(){
  curOut=$(cat $1/$temperatureFile | awk '{temp=$NF + 0.005; printf "%.2f\n",temp; }')
  [ -n "$debug" ] && logIt "device: $1 temperature: $curOut"
  echo $curOut
}

#------------------------------------
# getTemperatureByDeviceAlias
#------------------------------------
function getTemperatureByDeviceAlias(){
  local curAlias="$1"
  local devicePath=$(dbGetDevicePathByDeviceAlias $curAlias)
  if [ -n "$devicePath" ]
  then
    getTemperatureByDevicePath $devicePath
  else 
    getTemperatureByDevicePath $(getDevicePathByAlias $1)
  fi
}

#------------------------------------
# getDeviceAliasesByDevicePath
#------------------------------------
getDeviceAliasesByDevicePath() {
  cur_deviceAliases=$(dbGetDeviceAliasByDevicePath $1)
  [ -n "$debug" ] && echo "getDeviceAliasesByDeviceId() Device aliases: $cur_deviceAliases" 1>&2
  echo "$cur_deviceAliases"
}

#------------------------------------
# getDeviceByAlias
#------------------------------------
getDeviceByAlias(){
  [ -z "$1" ] && return 0
  [ -f $piLoggerDeviceAliasFile ] && { grep "^${1};" $piLoggerDeviceAliasFile | cut -d";" -f3  | awk -F"/" '{print $NF}' ; return 0 ; }
}

#------------------------------------
# getDevicePathByAlias
#------------------------------------
getDevicePathByAlias(){
  [ -f $piLoggerDeviceAliasFile ] && grep "^${1};" $piLoggerDeviceAliasFile | cut -d";" -f3 
  return 0 
}

#------------------------------------
# getDeviceIdByAny
#------------------------------------
function getDeviceIdByAny(){
  #--- try and resolve a full device path through any input (device id, path, alias)
  local curDevice="$1"
  local res=""

  #--- there is a directory (ie /mnt/1wire/deviceId) -> return just the deviceId
  [ -d $curDevice ] && { basename "$curDevice" ; return 0 ; }
  [ -d $oneWireDir/$curDevice ] && { echo "$curDevice" ; return 0 ; }

  #--- check the database for an alias
  res=$(dbGetDeviceIdByDeviceAlias $curDevice)
  [ -n "$res" ] && { echo "$res" ; return 0 ; }

  #--- lastly check the alias file
  res=$(getDeviceByAlias "$curDevice") 
  [ -n "$res" ] && { basename $(getDeviceByAlias "$curDevice") ; return 0 ; }

}

#------------------------------------
# getDevicePathByAny
#------------------------------------
function getDevicePathByAny(){
  #--- try and resolve a full device path through any input (device id, path, alias)
  local curDevice="$1"
  local res=""

  [ -d $curDevice ] && { echo "$curDevice" ; return 0 ; }
  [ -d $oneWireDir/$curDevice ] && { echo "$oneWireDir/$curDevice" ; return 0 ; }

  res=$(dbGetDevicePathByDeviceId $curDevice)
  [ -n "$res" ] && { echo "$res" ; return 0 ; }

  res=$(dbGetDevicePathByDeviceAlias $curDevice)
  [ -n "$res" ] && { echo "$res" ; return 0 ; }
  getDeviceByAlias "$curDevice" ; return 0

}

#------------------------------------
# getLastRRDUpdate
#------------------------------------
function getLastRRDUpdate(){

  local curDevice=$(basename $1)
  local curDeviceType=$2
  [ -z "$curDeviceType" ] && curDeviceType=temperature
  local deviceId=""
  local dbFile=""

#  printf "\ndebug: curDevice=$curDevice" 1>&2

  #--- the goal is to get a device-id or something mapping to a database file
  if [ -f "$dataDir/db/${curDevice}.$curDeviceType.rrd" ]
  then
    dbFile="$dataDir/db/${curDevice}.$curDeviceType.rrd"
  else
    #--- perhaps it is an alias? 
    deviceId=$(dbGetDeviceIdByDeviceAlias $curDevice)
    dbFile="$dataDir/db/${curDevice}.$curDeviceType.rrd"
  fi

  [ ! -f "$dbFile" ] && { echo "ERROR: no file $dbFile" 1>&2 ; return 1 ; }
  [ -n "$debug" ] && logIt "getLastRRDUpdate: $curDevice at $devicePath"

  rrdtool info $dbFile | sed -n 's/ds\[temperature\]\.last_ds = "\(.*\)"/\1/gp'
}

#---------------------------------
#logTemperature
#---------------------------------
function logTemperature(){
  local curDevice=$1
  local curTemperature=$2
  local curDeviceType=$3
  [ -z "$curDeviceType" ] && curDeviceType=temperature

  local lt_dbFile=$dbDir/${curDevice}.${curDeviceType}.rrd

  [ ! -f $lt_dbFile ] && sudo -u pi $this_dir/createRRD $curDevice
  [ ! -f $lt_dbFile ] && { logIt "ERROR: no rrd database: $lt_dbFile" ; return 1 ; } 
  rrdtool update $lt_dbFile N:${curTemperature}

  [ -n "$remoteLogging" ] && logTemperatureRemote $curDevice $curTemperature

}

#---------------------------------
# logTemperatureRemote
#---------------------------------
logTemperatureRemote(){
  ltr_device=$1
  ltr_temperature=$2

  # only call remote api if remoteHost is set
  if [ -n "$remoteHost" ]
  then
     logIt "Logging $ltr_device:$ltr_temperature to $remoteHost"
     wget -t 1 -q -O - "http://${remoteHost}/api/sensor/${ltr_device}/set/temperature/${ltr_temperature}"
  fi
  
  # export the time, device and the value for remote-logging-plugins to use
  export PILOGGER_DEVICE="$ltr_device"
  export PILOGGER_METRIC_VALUE="$ltr_temperature"
  export PILOGGER_METRIC_TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
  
  # now call all the activated remote logging plugins
  callRemoteLoggingPlugins
}

#---------------------------------
# getDBFilesFromGraphTemplate
#---------------------------------
getDBFilesFromGraphTemplate(){
  local n
  for n in $(cat $configDir/graph.$1.conf | grep -v "^#" | cut -d";" -f1)
  do
    getDeviceByAlias $n
  done
}

#---------------------------------
# getDBFileByAlias
#---------------------------------
getDBFileByAlias(){
  local curDevice

  if [ -a $dbDir/${1##*/}.rrd ]
  then
    echo $dbDir/${1##*/}.rrd
  else
    curDevice=$(getDeviceByAlias $1) 
    [ -n "$curDevice" ] && echo $dbDir/${curDevice}.rrd 
  fi
}

#---------------------------------
# getGraphColorFromGraphTemplateByAlias
#---------------------------------
getGraphColorFromGraphTemplateByAlias(){
  local curAlias
  local curGraphName

  curGraphName=$1
  curAlias=$2

  cat $configDir/graph.$curGraphName.conf | grep -v "^#" | grep "^${curAlias};" | cut -d";" -f2 | sed -e 's/#//'

}
#---------------------------------
# getAliasesFromGraphTemplate
#---------------------------------
getAliasesFromGraphTemplate(){
  cat $configDir/graph.$1.conf 2>/dev/null | grep -v "^#" | cut -d";" -f1
}


#---------------------------------
# callRemoteLoggingPlugins
#---------------------------------
callRemoteLoggingPlugins(){
   
   # lets get the activated plugins and iterate over them
   for activePlugin in $(ls $dataDir/remote-logging-enabled)
   do
      . $configDir/remote-logging.d/$activePlugin
   done
   
}
