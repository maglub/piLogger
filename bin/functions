thisScript=$(basename $0)
[ -z "$logDir" ] && logDir=/var/log/piLogger
logFile=$logDir/$thisScript.log
spoolDir=/var/spool/piLogger
configDir=$this_dir/../etc
piLoggerDeviceAliasFile=$configDir/aliases.conf

[ -z "$dbDir" ] && dbDir=$dataDir/db
[ -z "$graphDir" ] && graphDir=$dataDir/graphs
[ -z "$applicationUser" ] && applicationUser=pi
[ -z "$cacheDir" ] && cacheDir=$dataDir/cache

#------------------------------------
# Variables (normally set in piLogger.conf)
#------------------------------------
[ -z "$parallelProcessing" ] && parallelProcessing=1

#------------------------------------
# getConfig() -> so that we easily can migrate from piLogger.conf to any other way of dealing with config variables
#------------------------------------
function getConfig(){
  . $configDir/piLogger.conf
}

getConfig

#------------------------------------
# errorExit
#------------------------------------
function errorExit(){
  logIt "ERROR: $@"
  exit 1
}

#------------------------------------
# logIt()
#------------------------------------
function logIt(){
  local TS=$(date "+%Y%m%d_%H%M%S")
  echo "$TS;$thisScript;$@" >> $logFile
  echo "$TS;$thisScript;$@" 1>&2
}

#------------------------------------
# logCommand()
#------------------------------------
function logCommand(){
  local curCommand=$@

  if [ -n "$debug" ]
  then
    logIt "Running command
$curCommand
"
  fi

  $curCommand

}

#------------------------------------
# getAllDevices()
#------------------------------------
function getAllDevices(){
  local curDir="$1"
  local forceIt="$2"

  [[ -n "$forceIt" ]] && { echo $curDir/[0-9]*  | grep -v "\*$" ; return 0 ; }
  local curRes=$(dbGetAllDevicePaths)
  [ -n "$curRes" ] && { echo $curRes ; logIt "Found devices in the database." ; return 0 ; }
  [ -n "$debug" ] && logIt "No scanned devices in the database, cheking in fs."
  echo $curDir/bus*/[0-9]* | grep -v "\*$"
  return 0
}

#------------------------------------
# getAllDeviceNames
#------------------------------------
function getAllDeviceNames(){
  ld_dir=$1
  ls -1 $ld_dir/bus* | grep "^[0-9]" 
}

#------------------------------------
# getDeviceTypeByDevicePath
#------------------------------------
function getDeviceTypeByDevicePath() {
  cur_deviceType=$(cat $1/type)
  [ -n "$debug" ] && echo "Device type: $cur_deviceType" 1>&2
  echo $cur_deviceType
}

#------------------------------------
# getMetricValue
#------------------------------------
function getMetricValue(){

  local curDevice="$1"
  local curMetric="$2"

  [ -z "$curMetric" ] && curMetric=temperature
  [ -n "$debug" ] && logIt "fetching $curMetric for device: $curDevice"
  [ -d $oneWireDir/$curDevice ] && { getMetricByDevicePath $oneWireDir/$curDevice $curMetric ; return 0 ; }
  [ -d $curDevice ] && { getMetricByDevicePath $curDevice $curMetric ; return 0 ; }
  [ ! -d $curDevice ] && { getMetricByDeviceAlias $curDevice $curMetric; return 0 ; }
  
  return 0
}

#------------------------------------
# getMetricByDevicePath
#------------------------------------
function getMetricByDevicePath(){

  local metric="$2"
  [ -z "$metric" ] && metric=temperature

  #curOut=$(cat $1/$metric | awk '{temp=$NF + 0.005; printf "%.2f\n",temp; }')
  case $metric in
    counter*)
      curOut=$(cat $1/$metric | awk '{printf "%i\n",$NF; }')
      ;;
    *)
      curOut=$(cat $1/$metric | awk '{printf "%.2f\n",$NF; }')
      ;;
  esac
  [ -n "$debug" ] && logIt "device: $1 $metric: $curOut"
  echo $curOut
}

#------------------------------------
# getMetricByDeviceAlias
#------------------------------------
function getMetricByDeviceAlias(){

  local curAlias="$1"
  local devicePath=$(dbGetDevicePathByDeviceAlias $curAlias)

  local curMetric="$2"
  [ -z "$curMetric" ] && curMetric=temperature

  if [ -n "$devicePath" ]
  then
    getTemperatureByDevicePath $devicePath $curMetric
  fi
}

#------------------------------------
# getDeviceAliasesByDevicePath
#------------------------------------
function getDeviceAliasesByDevicePath() {
  cur_deviceAliases=$(dbGetDeviceAliasByDevicePath $1)
  [ -n "$debug" ] && echo "getDeviceAliasesByDeviceId() Device aliases: $cur_deviceAliases" 1>&2
  echo "$cur_deviceAliases"
}

#------------------------------------
# getSensorIdByAny
#------------------------------------
function getSensorIdByAny(){
  #--- try and resolve a full device path through any input (device id, path, alias)
  local curSensor="$1"
  local res=""

  #--- there is a directory (ie /mnt/1wire/deviceId) -> return just the deviceId
  [ -d "$curSensor" ] && { basename "$curSensor" ; return 0 ; }
  [ -d "$oneWireDir/$curSensor" ] && { echo "$curSensor" ; return 0 ; }

  #--- check the database for an alias
  res=$(dbGetDeviceIdByDeviceAlias $curSensor)
  [ -n "$res" ] && { echo "$res" ; return 0 ; }

  dbCheckSensorExistById $curSensor && { echo "$curSensor" ; return 0 ; }
  #--- no device found
  echo "Sensor $curSensor does not exist" 1>&2
  return 1
}

#------------------------------------
# getDevicePathByAny
#------------------------------------
function getDevicePathByAny(){
  #--- try and resolve a full device path through any input (device id, path, alias)
  local curDevice="$1"
  local res=""

  [ -d $curDevice ] && { echo "$curDevice" ; return 0 ; }
  [ -d $oneWireDir/$curDevice ] && { echo "$oneWireDir/$curDevice" ; return 0 ; }

  res=$(dbGetDevicePathByDeviceId $curDevice)
  [ -n "$res" ] && { echo "$res" ; return 0 ; }

  res=$(dbGetDevicePathByDeviceAlias $curDevice)
  [ -n "$res" ] && { echo "$res" ; return 0 ; }

}

#------------------------------------
# getLastRRDUpdate
#------------------------------------
function getLastRRDUpdate(){

  local curDevice=$(basename $1)
  local curDeviceType=$2
  [ -z "$curDeviceType" ] && curDeviceType=temperature
  local deviceId=""
  local dbFile=""

  #--- the goal is to get a device-id or something mapping to a database file
  if [ -f "$dataDir/db/${curDevice}.$curDeviceType.rrd" ]
  then
    dbFile="$dataDir/db/${curDevice}.$curDeviceType.rrd"
  else
    #--- perhaps it is an alias? 
    deviceId=$(dbGetDeviceIdByDeviceAlias $curDevice)
    dbFile="$dataDir/db/${curDevice}.$curDeviceType.rrd"
  fi

  [ ! -f "$dbFile" ] && { echo "ERROR: no file $dbFile" 1>&2 ; return 1 ; }
  [ -n "$debug" ] && logIt "getLastRRDUpdate: $curDevice at $devicePath"

  rrdtool info $dbFile | sed -n 's/ds\[.*]\.last_ds = "\(.*\)"/\1/gp'
}

#---------------------------------
# logMetric
#---------------------------------
function logMetric(){
  local curSensor=$1
  local curValue=$2
  local curMetric=$3
  [ -z "$curMetric" ] && curMetric=temperature

  local lt_dbFile=$dbDir/${curSensor}.${curMetric}.rrd

  [ ! -f $lt_dbFile ] && sudo -u $applicationUser $this_dir/createRRD $curSensor $curMetric
  [ ! -f $lt_dbFile ] && { logIt "ERROR: no rrd database: $lt_dbFile" ; return 1 ; } 
  rrdtool update $lt_dbFile N:${curValue}

  local isBlacklisted=$($this_dir/parse_yml $baseDir/etc/piLogger.yml remoteLogging_blacklist= | grep -w "$curSensor" |  wc -l)

  if [ -n "$remoteLogging" ]
  then
    if [ $isBlacklisted -eq 0 ]
    then
      logTemperatureRemote $curSensor $curValue $curMetric
    else
      logIt "    - Device $curSensor is globally blacklisted, skipping remote logging"
    fi
  fi

}

function logTemperature(){
  logMetric $@
}

#---------------------------------
# logTemperatureRemote
#---------------------------------
function logTemperatureRemote(){
  local sensor=$1
  local data=$2
  local metricType=$3
  
  [ -z "$metricType" ] && metricType=temperature
  
  # export the time, device and the value for remote-logging-plugins to use
  export PILOGGER_BASE_DIR=$baseDir
  export PILOGGER_AUTH_TOKEN=$authToken
  export PILOGGER_DEVICE_IDENTIFIER=$deviceIdentifier
  export PILOGGER_DEVICE_NAME="$HOSTNAME"
  export PILOGGER_SENSOR="$sensor"
  export PILOGGER_DATA="$data"
  export PILOGGER_METRIC_TYPE="$metricType"
  export PILOGGER_METRIC_TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
  
  # now call all the activated remote logging plugins
  callRemoteLoggingPlugins
}

#---------------------------------
# getDBFileByAlias
#---------------------------------
function getDBFileByAlias(){
  local curDevice

  if [ -a $dbDir/${1##*/}.rrd ]
  then
    echo $dbDir/${1##*/}.rrd
  fi
}

#---------------------------------
# getGraphColorFromGraphTemplateByAlias
#---------------------------------
function getGraphColorFromGraphTemplateByAlias(){
  local curAlias
  local curGraphName

  curGraphName=$1
  curAlias=$2

  cat $configDir/graph.$curGraphName.conf | grep -v "^#" | grep "^${curAlias};" | cut -d";" -f2 | sed -e 's/#//'

}
#---------------------------------
# getAliasesFromGraphTemplate
#---------------------------------
function getAliasesFromGraphTemplate(){
  cat $configDir/graph.$1.conf 2>/dev/null | grep -v "^#" | cut -d";" -f1
}

#---------------------------------
# callRemoteLoggingPlugins
#---------------------------------
function callRemoteLoggingPlugins(){
   
   # lets get the activated plugins and iterate over them
   logIt "    - Remote logging plugins"

   for activePlugin in $(ls $dataDir/remote-logging-enabled)
   do
      local parsedScriptName=$(echo $activePlugin | sed -e 's/-/_/g')
      local isBlacklisted=$($this_dir/parse_yml $baseDir/etc/piLogger.yml remoteLogging_${parsedScriptName}_blacklist= | grep -w "$curDevice" |  wc -l)
      if [ $isBlacklisted -eq 0 ]
      then
        logIt "    - $activePlugin -> sending data for $PILOGGER_SENSOR"
        #--- Sourcing the plugin is ugly. Only works for bash scripts
        #. $configDir/remote-logging.d/$activePlugin
        $baseDir/remote-logging.d/$activePlugin
      else
        logIt "    - $activePlugin -> sensor $PILOGGER_SENSOR BLACKLISTED in remoteLogging_${parsedScriptName}_blacklist"
      fi
   done
   
}

#---------------------------------
# callSpoolerFunctions
#---------------------------------
function callSpoolerFunctions(){

   # loop over all active plugins
   for activePlugin in $(ls $dataDir/remote-logging-enabled)
   do
       # check if there are spooler files for this plugin
	local numSpoolFiles="$(find $spoolDir -type f -name "${activePlugin}*" 2>/dev/null | wc -l)"
       if [ "$numSpoolFiles" -gt 0 ]; then
          logIt "  - Spooler files for plugin $activePlugin found in $spoolDir ($numSpoolFiles)" 

          if [ $(ps -ef | grep "$activePlugin \-\-processSpool" | grep -v grep | wc -l) -gt 0 ]; then
             logIt "  - Not calling processSpoolDir option on $activePlugin as there is already 1 process running"
          else
             logIt "  - Calling processSpoolDir option on $activePlugin in the background"
             export PILOGGER_BASE_DIR=$baseDir
             $baseDir/remote-logging.d/$activePlugin --processSpoolDir &
          fi
       else
          [ -n "$debug" ] && logIt "No spooler files for plugin $activePlugin found" 
       fi

   done

}

#------------------------------
# genCrontab
#------------------------------
function genCrontab(){
  #--- argument is measured in seconds between each shot
  #--- the interval should be divisible by 60
  #--- if the interval is over 60, it should be even minutes, divisible by 60
  #--- at the moment, it is not possible to set an interval > 3600

  local interval=$1
  [ $interval -gt 3600 ] && return 1

  if [ $interval -lt 60 ]
  then
    local sleepTime=0
    while [ $sleepTime -lt 60 ]
    do
      cat $baseDir/config/crontab.template | sed -e 's/XXX_DIVIDER_XXX/1/g' -e 's/XXX_SLEEP_TIME_XXX/'$sleepTime'/g'
      (( sleepTime += $interval ))
    done
  else
    local sleepTime=0
    local divider=1
    (( divider = $interval / 60 ))
    cat $baseDir/config/crontab.template | sed -e 's/XXX_DIVIDER_XXX/'$divider'/g' -e 's/XXX_SLEEP_TIME_XXX/'$sleepTime'/g'

  fi

}

#------------------------------
# setCrontab
#------------------------------
function setCrontab(){
  local interval="$1"
  (crontab -l | grep -v "XXX_PISNAPPER_CRON_XXX"; $this_dir/wrapper genCrontab $interval ) | crontab  -
}

#------------------------------
# killCronJobs
#------------------------------
function killCronJobs(){
  ps -ef | grep [X]XX_PISNAPPER_CRON_XXX | awk '{print $2}' | xargs -L1 -IX kill X
  return 0
}

#------------------------------
# genDisabledCrontab
#------------------------------
function genDisabledCrontab(){
  local interval="$1"
  crontab -l | awk ' $0 !~ /^#/ { printf "#Disabled: %s\n", $0;} /^#/ {print}'
}

#------------------------------
# genEnabledCrontab
#------------------------------
function genEnabledCrontab(){
  local interval="$1"
  crontab -l | sed -e 's/^#Disabled: //'
}

#------------------------------
# disableCrontab
#------------------------------
function disableCrontab(){
  local interval="$1"
  genDisabledCrontab | crontab  -
}

#------------------------------
# enableCrontab
#------------------------------
function enableCrontab(){
  local interval="$1"
  genEnabledCrontab | crontab  -
}

#------------------------------
# getCrontab
#------------------------------
function getCrontab(){
  crontab -l | grep -E "# m h|#Disabled:"
  crontab -l | grep -vE "^#|^$"
}

#------------------------------
# getGitVersion
#------------------------------
function getGitVersion(){
  curl -s https://raw.githubusercontent.com/maglub/piLogger/master/currentVersion | tee $cacheDir/gitVersion
}

