#!/bin/bash 

this_dir=$(cd `dirname $0`;pwd)
this_script=$(basename $0)
. $this_dir/functions
. $this_dir/functions-sqlite3


#---------------------------------
# printUsage()
#---------------------------------
usage(){
  cat<<EOT

$this_script graph_name <from date> <to date>

Example:

$this_script all.graph.20h "20131224 00:30:00" "20131224 23:59:59"

EOT
}

#---------------------------------
# 
#---------------------------------

#=================================
# MAIN
#=================================

#--- set default parameters
exportTime=24h

logIt "* Starting export of JSON for $1 $2"

#--- if no parameters sent, print "Default graph"

[ -z "$1" ] && { curAliases=$(dbGetAliasTokensFromPlotGroup default) ; graphName=default ; numSensors=2 ; }


if [ -n "$1" ]
then
	case $1 in
		--sensor=*)
		curAliases=${1#*=}
		graphName=$2
		numSensors=1
		;;
	
		*)
		graphName=$1
		curAliases=$(dbGetAliasTokensFromPlotGroup $graphName)
		numSensors=2
		;;
		
	esac
fi

#--- take care of the remaining parameters, if any
[ -n "$2" ] && exportTime=$2
[ -n "$3" ] && groupName=$3


TS=$(date "$dateFormat")

fromDateEpoc=$(date -d "$fromDate" "+%s")
toDateEpoc=$(date -d "$toDate" "+%s")

#--- XXX 2015-01-13 very bad construct
#--- XXX we really don't want to get all devices in the filesystem if there is no aliases
[ -z "$curAliases" ] && curAliases=$(getAllDeviceNames $oneWireDir | grep -v "81\.")

#--- if multiple sensors, print an array
[ $numSensors -gt 1 ] && printf "["

curComma=" "
for curAliasTokens in $curAliases
do
  #curAlias=${curAliasTokens%:*}
  #curMetric=${curAliasTokens#*:}

  curAlias=$(echo ${curAliasTokens} | cut -d":" -f1)
  curMetric=$(echo ${curAliasTokens} | cut -d":" -f2)
  curMultiplier=$(echo ${curAliasTokens} | cut -d":" -f3)

  [ -n "$debug" ] && echo "curAliasTokens: $curAliasTokens" 1>&2
  [ -n "$debug" ] && echo "curAlias: $curAlias" 1>&2
  [ -n "$debug" ] && echo "curMetric: $curMetric" 1>&2
  [ -n "$debug" ] && echo "curMultiplier: $curMultiplier" 1>&2

  curMetricFiltered=$(echo ${curMetric} | sed -e 's/\./_/g')
  curVName=$(echo $curAlias | sed -e 's/\.//g')
  curAggregateType=$(dbGetAggregateTypeByPlotDeviceAlias $graphName $curAlias)
  curAggregateType=AVERAGE
  [ -z "$curMetric" ] && curMetric=temperature


  case $curMetric in
    counter*)
      rrdMultiplicator=$(echo "3600 * $curMultiplier" | bc)
      ;;
    *)
      rrdMultiplicator=1
      ;;
  esac

  #--- 2015-12-16 => change this occurance of temperature to "values" asap, which requires rewrite of graph code in javascript
  #--- XXX
  printf '%s\n{"sensor":"'%s'", "type":"temperature", "data":[' "${curComma}" ${curAlias}

  curDbFile=$(dbGetDBFileByAlias $curAlias $curMetric)

  tmpFile=$(mktemp -t $this_script.XXXXXX)
  cat>$tmpFile<<EOT
  #rrdtool xport -s now-${exportTime} -e now --step 60  DEF:${curVName}=${curDbFile}:$curMetricFiltered:${curAggregateType} XPORT:${curVName}:$curVName | perl -ne 'if(m!.*row><t>(.*)</t><v>([^N]*?)</v>!) { printf "," if (\$n > 0); \$n++ ; printf "[%i, %.2f]", \$1*1000, \$2*1; }'
  rrdtool xport -s now-${exportTime} -e now --step 60  DEF:${curVName}=${curDbFile}:$curMetricFiltered:${curAggregateType} CDEF:output=${curVName},$rrdMultiplicator,*  XPORT:output:output | perl -ne 'if(m!.*row><t>(.*)</t><v>([^N]*?)</v>!) { printf "," if (\$n > 0); \$n++ ; printf "[%i, %.2f]", \$1*1000, \$2*1; }'
EOT
#  cat $tmpFile 1>&2
  sh $tmpFile
  rm $tmpFile

  curComma=","
  printf "]}"
done

#--- end of array (if multiple sensors)
[ $numSensors -gt 1 ] && printf "\n]" || printf "\n"

